# -*- coding: utf-8 -*-
"""Project_2_Words.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_Vkas07lwWjvU7sdCINcScQSRL5FFfn3

# Project 2 - Words

In this project we will search for words based on predefined criteria.

For instance, which words does not include any vowels or the letters of which words are in alphabetical order...

The words are from **Lorem Ipsum**.

Lorem Ipsum is simply dummy text of the printing and typesetting industry. 

https://www.lipsum.com/

**Preparation:**

To read the words:

* open() function
    * open(file, mode)
    * mode:
        * r: read (default)
        * a: append
        * w: write
        * x: create
"""

# open()
"""
file = open('words.txt')

# let's read the line

file.readline()

# let's read the second line

file.readline()

**Special Chars:**
* \n : new line character
* \r : carriage return (enter)


# run readline

# line = file.readline()


# print the first 20 lines

file = open('words.txt')

# we need index -> enumerate

for index, line in enumerate(file):
    
    if index <= 20:
        line = line.strip("\n")
        print(line)

# remove new line

file = open('words.txt')

for index, line in enumerate(file):
    
    if index <= 20:
        
        # split() -> splits the text from space chars (space, \n new line, carriage return)
        word_list = line.split()
        print(word_list)


**Exercise 1:**

We will print the words which have number of letters more than 10.
"""

# read the file
file = open('words.txt')

for line in file:
    
    # split() -> \n
    word_list = line.split()
    
    # word is the first element in list
    word = word_list[0]
    
    # check number of letters
    if len(word) > 10:
        print(word + "\n")

"""**Exercise 2:**

Define a new function.

This function will search for the words which have no vowels in it. (a, e, i, o, u)
"""


def check_for_vowels():
    
    # read the file
    file = open('words.txt')
    
    for line in file:
        
        # split() -> \n
        # word_list = line.split()

        # word is the first element in list
        # word = word_list[0]
        
        # convert into lower case
        word = line.strip("\n").lower()
        
        # check if included vowel
        if not 'a' in word and \
           not 'e' in word and \
           not 'i' in word and \
           not 'o' in word and \
           not 'u' in word:
            print(word)

check_for_vowels()

"""Check for words which includes 'ae' together and in this order. """

def check_for_ae():
    
    # read the file
    file = open('words.txt')
    
    for line in file:
        
        # split() -> \n
        word_list = line.split()

        # word is the first element in list
        word = word_list[0]
        
        # convert into lower case
        word = word.lower()
        # check if included vowel
        if 'ae' in word:
            print(word)


check_for_ae()

"""**Exercise 3:**

We will define a function **is_any_forbidden_letter**.

It will take letters which are forbidden and a text.

It will check if this text included any of these forbidden letters.

bool function -> True, False
"""

def is_any_forbidden_letter(text, forbidden_letters):
    
    for letter in text:
        if letter in forbidden_letters:
            return True
    else:
        return False

sentence = 'This is a forbidden sentence.'
forbidden_letters = 'ae'

is_any_forbidden_letter(sentence, forbidden_letters)

sentence = 'This is a forbidden sentence.'
forbidden_letters = 'xy'

is_any_forbidden_letter(sentence, forbidden_letters)

"""**Exercise 4:**

Define a function named **only_uses_these_letters**

It will take letters and a text.

It will check if this text uses only these letters.

It the text uses only these letters -> True

bool function -> True, False
"""

def only_uses_these_letters(text, letters):
    
    for char in text:
        # if the char in letters or not
        # check if char is an alphabetical letter -> isalpha()
        if char.isalpha() and not char in letters:
            return False
    else:
        return True

sentence = 'check'
letters = 'chek'

only_uses_these_letters(sentence, letters)

sentence = 'check this'
letters = 'chek'

only_uses_these_letters(sentence, letters)

"""**Exercise 5:**

use the function E4, check for Lorem words using only 'ens' letters.
"""

def only_uses_these_letters_lorem(letters):
    
    # read the file
    file = open('words.txt')
    
    for line in file:
        
        # split() -> \n
        word_list = line.split()

        # word is the first element in list
        word = word_list[0]
        
        # convert into lower case
        word = word.lower()
        
        if only_uses_these_letters(word, letters):
            print(word)

letters = 'ens'
only_uses_these_letters_lorem(letters)

"""**Exercise 6:**

Define a function named **uses_all**.

It will take a text and letters.

If the text uses all the letter at least once, it will return True.
"""

def uses_all(text, letters):
    
    it_uses_all = True
    
    for letter in letters:
        # if letter is not in text -> text is not using this letter
        if not letter in text:
            it_uses_all = False
    
    # loop finishes
    return it_uses_all

letters = 'abd'

text = 'This is a bold sentence.'

uses_all(text, letters)

letters = 'abcd'

text = 'This is a bold sentence.'

uses_all(text, letters)

letters = 'abdf'

text = 'This is a bold sentence.'

uses_all(text, letters)

"""**Exercise 7:**

Use the function E6 and for Lorem letters check:

The words using all the letters in 'aei'.
"""

def uses_all_lorem(letters):
    
    # read the file
    file = open('words.txt')
    
    for line in file:
        
        # split() -> \n
        word_list = line.split()

        # word is the first element in list
        word = word_list[0]
        
        # convert into lower case
        word = word.lower()
        
        if uses_all(word, letters):
            print(word)

letters = 'aei'
uses_all_lorem(letters)

"""**Exercise 8:**

Use funtions from:
* E4
* E6

To find the Lorem words which uses only `fir` letters and use them all.

The function name will be **only_uses_all**.
"""

def only_uses_all(letters):
    
    # read the file
    file = open('words.txt')
    
    for line in file:
        
        # split() -> \n
        word_list = line.split()

        # word is the first element in list
        word = word_list[0]
        
        # convert into lower case
        word = word.lower()
        
        if only_uses_these_letters(word, letters) and uses_all(word, letters):
            print(word)

letters = 'fir'

only_uses_all(letters)

"""**Exercise 9:**

**ordered_word**: if the letters in a word is in alphabetical order.

Define a function named **is_ordered_word**.

It will take a string parameter as text.

It will return True if it is an ordered word.

Ex: abc, agor, def
"""

def is_ordered_word(word):
    
    # previous letter is the first letter in word
    prev = word[0]
    
    for letter in word:
        
        # check if prev is smaller
        if letter < prev:
            return False
        
        # reassign the previous as the current letter
        prev = letter
        
    # return True -> because loop has completed
    return True

word = 'agor'

is_ordered_word(word)

word = 'python'

is_ordered_word(word)

word = 'hnty'

is_ordered_word(word)

"""**Exercise 10:**

Use function in E9 to find out which Lorem words are ordered.
"""

def is_ordered_word_lorem():
    
    # read the file
    file = open('words.txt')
    
    for line in file:
        
        # split() -> \n
        word_list = line.split()

        # word is the first element in list
        word = word_list[0]
        
        # convert into lower case
        word = word.lower()
        
        
        # check if this word is an ordered word
        if is_ordered_word(word):
            print(word)

is_ordered_word_lorem()

word = 'Nam'

is_ordered_word(word)

print('N' < 'a')

